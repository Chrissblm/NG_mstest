{"version":3,"file":"functions.js","mappings":"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","sources":["webpack://excel-custom-functions-js/webpack/bootstrap","webpack://excel-custom-functions-js/./src/functions/functions.js","webpack://excel-custom-functions-js/webpack/runtime/define property getters","webpack://excel-custom-functions-js/webpack/runtime/hasOwnProperty shorthand"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","/* global , console, localStorage */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/**\n * Add two numbers\n * @customfunction\n * @param {number} first First number\n * @param {number} second Second number\n * @returns {number} The sum of the two numbers.\n */\nexport function add(first, second) {\n  return first + second;\n}\n\n/**\n * Submits text to GPT-3 and returns the completion\n * @customfunction\n * @param {string} prompt Prompt to submit to GPT-3\n * @param {number} [temperature] Model temperature (0-1)\n * @param {string} [model] Model name (e.g. text-davinci-002)\n * @param {number} [maxTokens] Max Tokens (< 4000)\n * @returns {string} Results from GPT\n */\nexport function GPTINTERACT(prompt, temperature, model, maxTokens) {\n  return new Promise(function (resolve, reject) {\n    var key = localStorage.getItem(\"apikey\");\n    if (key) {\n      var data = {\n        prompt: prompt,\n        temperature: temperature || 0.6,\n        model: model || \"text-davinci-002\",\n        max_tokens: maxTokens || 256,\n      };\n      var xhr = new XMLHttpRequest();\n      xhr.open(\"POST\", \"https://api.openai.com/v1/completions\", true);\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n      xhr.setRequestHeader(\"Authorization\", \"Bearer \" + key);\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          if (xhr.status === 200) {\n            var response = JSON.parse(xhr.responseText);\n            resolve(response.choices[0].text.trim());\n          } else {\n            reject(\"Request failed with status: \" + xhr.status);\n          }\n        }\n      };\n\n      xhr.onerror = function () {\n        reject(\"An error occurred during the request.\");\n      };\n\n      xhr.send(JSON.stringify(data));\n    } else {\n      reject(\"No API Key Found! You have not subscribed to the ChatGPT key yet!\");\n    }\n  });\n}\n/**\n * Submits text to GPT and returns the completion\n * @customfunction\n * @param {string} model Model name (e.g. gpt-3.5-turbo)\n * @param {string} userContent Content from the user\n * @param {string} [assistantContent] Content from the assistant\n * @param {number} [temperature] Model temperature (0-1)\n * @param {number} [maxTokens] Max Tokens (< 4000)\n * @returns {Promise<string>} Results from GPT\n */\nexport function AIchat(model, userContent, assistantContent, temperature, maxTokens) {\n  return new Promise(function (resolve, reject) {\n    var key = localStorage.getItem(\"apikey\");\n    if (key) {\n      var messages = [\n        {\n          role: \"assistant\",\n          content: assistantContent || \"You are a helpful assistant.\",\n        },\n        {\n          role: \"user\",\n          content: userContent,\n        },\n      ];\n      var data = {\n        model: model || \"gpt-3.5-turbo\",\n        messages: messages,\n        temperature: temperature || 0.6,\n        max_tokens: maxTokens || 256,\n      };\n      var xhr = new XMLHttpRequest();\n      xhr.open(\"POST\", \"https://api.openai.com/v1/chat/completions\", true);\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n      xhr.setRequestHeader(\"Authorization\", \"Bearer \" + key);\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === XMLHttpRequest.DONE) {\n          if (xhr.status === 200) {\n            var response = JSON.parse(xhr.responseText);\n            resolve(response.choices[0].message.content.trim());\n          } else {\n            reject(\"Request failed with status: \" + xhr.status);\n          }\n        }\n      };\n      xhr.onerror = function () {\n        reject(\"An error occurred during the request.\");\n      };\n      xhr.send(JSON.stringify(data));\n    } else {\n      reject(\"No API Key Found! You have not subscribed to the ChatGPT key yet!\");\n    }\n  });\n}\n\n/*\n * Uses sample examples to autopopulate cells. Ensure to lock the input and output examples.\n * @customfunction\n * @param {string[][]} examples_input Input array to submit to GPT3\n * @param {string[][]} examples_output Output array to submit to GPT3\n * @param {string} input Input value\n * @param {number} [temperature] Model temperature (0-1)\n * @param {string} [model] Model name (e.g., text-davinci-002)\n * @param {number} [maxTokens] Max Tokens (< 4000)\n * @returns {string} Returns the predicted output based on the range input\n */\n/* function GPTPREDICT(examples_input, examples_output, input, temperature, model, maxTokens) {\n  var prompt = `Provide example inputs, I will identify the pattern and produce the associated outputs.`;\n\n  for (let i = 0; i < examples_input.length; i++) {\n    var example_input = examples_input[i];\n    var example_output = examples_output[i];\n    prompt += `\\nInput: ${example_input}\\nOutput: ${example_output}`;\n  }\n  prompt += `\\n\\nInput: ${input}\\nOutput:`;\n\n  return new Promise(function (resolve) {\n    var key = localStorage.getItem(\"apikey\");\n    if (key) {\n      var xhr = new XMLHttpRequest();\n      xhr.open(\"POST\", \"https://api.openai.com/v1/completions\", true);\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n      xhr.setRequestHeader(\"Authorization\", \"Bearer \" + key);\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {\n          var response = JSON.parse(xhr.responseText);\n          resolve(response.choices[0].text.trim());\n        }\n      };\n\n      var data = {\n        prompt: prompt,\n        temperature: temperature || 0.6,\n        model: model || \"gpt-3.5-turbo\",\n        max_tokens: maxTokens || 256,\n      };\n\n      xhr.send(JSON.stringify(data));\n      xhr.onerror = function (event) {\n        resolve(event.error);\n      };\n    } else {\n      resolve(\"No API Key Found! You have not subscribed to the RapidApi key yet!\");\n    }\n  });\n} */\n\n/**\n * Submits text to OpenAI and returns the completion\n * @customfunction\n * @param {string} content The contents of the message. content is required for all messages except assistant messages with function calls.\n * @param {string} [role] The role of the messages author. One of system, user, assistant, or function.\n * @param {string} [model] ID of the model to use. See the model endpoint compatibility table for details on which models work with the Chat API.\n * @param {number} [maxTokens] Max Tokens (< 4000)\n * @param {number} [temperature] What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n * @returns {string} Results from GPT\n */\n\nexport async function ASK(content, role, model, maxTokens, temperature) {\n  return new Promise(function (resolve) {\n    var key = localStorage.getItem(\"apikey\");\n    if (key) {\n      var data = {\n        model: model ? model : \"gpt-3.5-turbo\",\n        messages: [\n          {\n            role: role ? role : \"user\",\n            content: content,\n          },\n        ],\n        max_tokens: maxTokens ? maxTokens : 256,\n        temperature: temperature ? temperature : 1,\n      };\n      var xhr = new XMLHttpRequest();\n      xhr.open(\"POST\", \"https://api.openai.com/v1/chat/completions\", true);\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n      xhr.setRequestHeader(\"Authorization\", \"Bearer \" + key);\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === XMLHttpRequest.DONE && xhr.status === 200) {\n          var response = JSON.parse(xhr.responseText);\n          resolve(response.choices[0].text.trim());\n        }\n      };\n\n      xhr.send(JSON.stringify(data));\n      xhr.onerror = function (event) {\n        resolve(event.error);\n      };\n    } else {\n      resolve(\"No API Key Found! You have not subscribed to the ChatGPT key yet!\");\n    }\n  });\n}\n\n/* // Function description for Excel\nASK.description = \"Creates a model response for the given chat conversation using the OpenAI language model.\";\nASK.paramDocs = {\n  content:\n    \"The contents of the message. Content is required for all messages except assistant messages with function calls.\",\n  role: \"(Optional) The role of the message author. One of system, user, assistant, or function. Defaults to user.\",\n  model:\n    \"(Optional) ID of the model to use. See the model endpoint compatibility table for details on which models work with the Chat API. Defaults to gpt-3.5-turbo.\",\n  maxTokens: \"(Optional) The maximum tokens (< 4000). Defaults to 4096.\",\n  temperature:\n    \"(Optional) What sampling temperature to use, between 0 and 2. Higher values like 0.8 make the output more random, while lower values like 0.2 make it more focused and deterministic. Defaults to 1.\",\n}; \n*/\n\n/* \n// Function description for Excel\nGPTINTERACT.description = \"Generates completion using GPT-3 language model.\";\nGPTINTERACT.paramDocs = {\n  prompt: \"The prompt to submit to GPT-3.\",\n  temperature: \"(Optional) The model temperature (0-1).\",\n  model: \"(Optional) The model name. Available options: 'text-davinci-002', 'gpt-4.0'.\",\n  maxTokens: \"(Optional) The maximum tokens (< 4000).\",\n};\n */\n\n/**\n * Writes a message to console.log().\n * @customfunction LOG\n * @param {string} message String to write.\n * @returns String to write.\n */\nexport async function logMessage(message) {\n  console.log(message);\n  return message;\n}\n\nCustomFunctions.associate(\"ADD\", add);\nCustomFunctions.associate(\"GPTINTERACT\", GPTINTERACT);\nCustomFunctions.associate(\"AICHAT\", AIchat);\nCustomFunctions.associate(\"ASK\", ASK);\nCustomFunctions.associate(\"LOG\", logMessage);","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }"],"names":["__webpack_require__","_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","_typeof","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","undefined","done","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","doneResult","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","_ASK","_callee","content","role","model","maxTokens","temperature","_context","localStorage","getItem","data","messages","max_tokens","xhr","XMLHttpRequest","open","setRequestHeader","onreadystatechange","readyState","DONE","status","response","JSON","parse","responseText","choices","text","trim","send","stringify","onerror","event","_logMessage","_callee2","message","_context2","console","log","d","definition","o","get","prop","CustomFunctions","associate","first","second","prompt","userContent","assistantContent","_x","_x2","_x3","_x4","_x5","_x6"],"sourceRoot":""}